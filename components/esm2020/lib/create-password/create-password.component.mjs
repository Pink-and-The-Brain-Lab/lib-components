import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Subject, takeUntil } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../input-validation/input-validation.directive";
import * as i3 from "@angular/forms";
import * as i4 from "../password-validation/password-validation.directive";
export class CreatePasswordComponent {
    constructor() {
        this.destroy$ = new Subject();
        this.passwordValidation = new EventEmitter();
        this.submitEvent = new EventEmitter();
        this.passwordEvent = new EventEmitter();
        this.messageValidation = { password: '', confirmPassword: '' };
        this.inputConfig = ['password', 'password'];
        this.isPasswordValid = false;
        this.passwordsAreEquals = () => {
            return () => {
                return this.password?.value === this.confirmPassword?.value ? null : { passwordsDiferent: true };
            };
        };
        this.form = new FormGroup({
            password: new FormControl('', [Validators.required]),
            confirmPassword: new FormControl('', [Validators.required, this.passwordsAreEquals()]),
        });
    }
    ngOnInit() {
        this.form.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.passwordValidation.emit(this._passwordValidation);
            if (!this._passwordValidation)
                return;
            this.passwordEvent.emit({
                password: this.password?.value,
                confirmPassword: this.confirmPassword?.value
            });
        });
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.unsubscribe();
    }
    validatePassword(value) {
        this.isPasswordValid = value;
    }
    ;
    get password() {
        return this.form?.get('password');
    }
    get confirmPassword() {
        return this.form?.get('confirmPassword');
    }
    get _passwordValidation() {
        const arePassValid = this.password?.valid && this.confirmPassword?.valid;
        const arePassEquals = this.password?.value === this.confirmPassword?.value;
        return this.isPasswordValid && !!arePassValid && arePassEquals;
    }
    togglePasswordVisibility(index, type) {
        this.inputConfig[index] = type;
    }
    submit() {
        if (!this._passwordValidation)
            return;
        this.submitEvent.emit();
    }
}
CreatePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: CreatePasswordComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
CreatePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.2", type: CreatePasswordComponent, selector: "cdk-create-password", inputs: { messageValidation: "messageValidation" }, outputs: { passwordValidation: "passwordValidation", submitEvent: "submitEvent", passwordEvent: "passwordEvent" }, ngImport: i0, template: "<form [formGroup]=\"form\" class=\"d-flex flex-column\" (submit)=\"submit()\">\r\n    <div class=\"row-form right-icon w-100\">\r\n        <input [type]=\"inputConfig[0]\" cdkInputValidation formControlName=\"password\" />\r\n        <label>Password</label>\r\n        <i class=\"bi bi-eye\" *ngIf=\"inputConfig[0] !== 'password'\" (click)=\"togglePasswordVisibility(0, 'password')\"></i>\r\n        <i class=\"bi bi-eye-slash\" *ngIf=\"inputConfig[0] === 'password'\" (click)=\"togglePasswordVisibility(0, 'text')\"></i>\r\n\r\n        <small *ngIf=\"password && password.touched && password.errors\">\r\n            <span *ngIf=\"password && password.errors['required']\">Password is required</span>\r\n        </small>\r\n    </div>\r\n\r\n    <p\r\n        class=\"mt-4 mb-0\"\r\n        [cdkPasswordValidation]=\"password?.value\"\r\n        (isValid)=\"validatePassword($event)\"\r\n    >\r\n        At least <span>8 characters</span>, including a <span>number</span> and a <span>letter</span>\r\n    </p>\r\n\r\n    <div class=\"row-form right-icon w-100\">\r\n        <input [type]=\"inputConfig[1]\" cdkInputValidation formControlName=\"confirmPassword\" />\r\n        <label>Confirm Password</label>\r\n        <i class=\"bi bi-eye\" *ngIf=\"inputConfig[1] !== 'password'\" (click)=\"togglePasswordVisibility(1, 'password')\"></i>\r\n        <i class=\"bi bi-eye-slash\" *ngIf=\"inputConfig[1] === 'password'\" (click)=\"togglePasswordVisibility(1, 'text')\"></i>\r\n\r\n        <small *ngIf=\"confirmPassword && confirmPassword.touched && confirmPassword.errors\">\r\n            <span *ngIf=\"confirmPassword && confirmPassword.errors['required']\">{{ messageValidation.password }}</span>\r\n            <span *ngIf=\"password && confirmPassword.errors['passwordsDiferent']\">{{ messageValidation.confirmPassword }}</span>\r\n        </small>\r\n    </div>\r\n\r\n    <button type=\"submit\" hidden></button>\r\n</form>", styles: ["p{color:#7f858c;font-size:.875em}i{color:#7f858c;cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.InputValidationDirective, selector: "[cdkInputValidation]" }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i4.PasswordValidationDirective, selector: "[cdkPasswordValidation]", inputs: ["cdkPasswordValidation"], outputs: ["isValid"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: CreatePasswordComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cdk-create-password', template: "<form [formGroup]=\"form\" class=\"d-flex flex-column\" (submit)=\"submit()\">\r\n    <div class=\"row-form right-icon w-100\">\r\n        <input [type]=\"inputConfig[0]\" cdkInputValidation formControlName=\"password\" />\r\n        <label>Password</label>\r\n        <i class=\"bi bi-eye\" *ngIf=\"inputConfig[0] !== 'password'\" (click)=\"togglePasswordVisibility(0, 'password')\"></i>\r\n        <i class=\"bi bi-eye-slash\" *ngIf=\"inputConfig[0] === 'password'\" (click)=\"togglePasswordVisibility(0, 'text')\"></i>\r\n\r\n        <small *ngIf=\"password && password.touched && password.errors\">\r\n            <span *ngIf=\"password && password.errors['required']\">Password is required</span>\r\n        </small>\r\n    </div>\r\n\r\n    <p\r\n        class=\"mt-4 mb-0\"\r\n        [cdkPasswordValidation]=\"password?.value\"\r\n        (isValid)=\"validatePassword($event)\"\r\n    >\r\n        At least <span>8 characters</span>, including a <span>number</span> and a <span>letter</span>\r\n    </p>\r\n\r\n    <div class=\"row-form right-icon w-100\">\r\n        <input [type]=\"inputConfig[1]\" cdkInputValidation formControlName=\"confirmPassword\" />\r\n        <label>Confirm Password</label>\r\n        <i class=\"bi bi-eye\" *ngIf=\"inputConfig[1] !== 'password'\" (click)=\"togglePasswordVisibility(1, 'password')\"></i>\r\n        <i class=\"bi bi-eye-slash\" *ngIf=\"inputConfig[1] === 'password'\" (click)=\"togglePasswordVisibility(1, 'text')\"></i>\r\n\r\n        <small *ngIf=\"confirmPassword && confirmPassword.touched && confirmPassword.errors\">\r\n            <span *ngIf=\"confirmPassword && confirmPassword.errors['required']\">{{ messageValidation.password }}</span>\r\n            <span *ngIf=\"password && confirmPassword.errors['passwordsDiferent']\">{{ messageValidation.confirmPassword }}</span>\r\n        </small>\r\n    </div>\r\n\r\n    <button type=\"submit\" hidden></button>\r\n</form>", styles: ["p{color:#7f858c;font-size:.875em}i{color:#7f858c;cursor:pointer}\n"] }]
        }], propDecorators: { passwordValidation: [{
                type: Output
            }], submitEvent: [{
                type: Output
            }], passwordEvent: [{
                type: Output
            }], messageValidation: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,