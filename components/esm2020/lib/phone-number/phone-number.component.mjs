import { Component, EventEmitter, Output } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { countriesCode } from './data/countries-codes';
import { Country } from './model/country.model';
import * as i0 from "@angular/core";
import * as i1 from "./service/phone-validation.service";
import * as i2 from "@angular/common";
import * as i3 from "../custom-select/custom-select.component";
import * as i4 from "@angular/forms";
import * as i5 from "../input-validation/input-validation.directive";
import * as i6 from "../loading-button/loading-button.directive";
import * as i7 from "../spinner/spinner.component";
export class PhoneNumberComponent {
    constructor(phoneValidationService) {
        this.phoneValidationService = phoneValidationService;
        this.validationPhoneEvent = new EventEmitter();
        this.isValidPhoneNumber = () => {
            return (control) => {
                this.getCountryByPhoneNumber(control.value);
                const validation = this.phoneValidationService.validateAndFormat(control.value, this.selectedOption.code, this.selectedOption.dial_code);
                if (validation.masked === control.value)
                    return null;
                this.labelPhoneNumberValidation = 'Phone number is invalid';
                this.phoneValidated = false;
                this.validationPhoneEvent.emit(false);
                if (this.verifiedPhoneNumber.length && control.value === this.verifiedPhoneNumber.replace(/\s|-/gi, '')) {
                    this.validationPhoneEvent.emit(true);
                    this.phoneValidated = true;
                    return null;
                }
                if (validation.isValid) {
                    control.setValue(validation.masked || control.value);
                    return null;
                }
                return { isInvalidPhoneNumber: true };
            };
        };
        this.options = [];
        this.selectedOption = new Country();
        this.phoneValidated = false;
        this.phoneAvailable = false;
        this.isLoading = false;
        this.verifiedPhoneNumber = '';
        this.labelPhoneNumberValidation = 'Phone number is invalid';
        this.formGroup = new FormGroup({
            phoneNumber: new FormControl('', [Validators.required, this.isValidPhoneNumber()])
        });
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.options = countriesCode.map(country => new Country(country.name, country.dial_code, country.code, country.latitude, country.longitude));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.unsubscribe();
    }
    getSelectedCountry(country) {
        this.selectedOption = new Country(country.name, country.dial_code, country.code, country.latitude, country.longitude);
        this.formGroup.patchValue({
            phoneNumber: country.dial_code,
        });
    }
    getCountryByPhoneNumber(phoneNumber) {
        const countries = this.phoneValidationService.filterCountryCode(phoneNumber);
        if (countries.length)
            this.checkIfHasEqualsDialCode(countries);
    }
    checkIfHasEqualsDialCode(countries) {
        const hasEqualsDialCode = countries.find(country => country.dial_code === this.selectedOption.dial_code && country.name === this.selectedOption.name);
        if (!hasEqualsDialCode)
            this.selectedOption = new Country(countries[0].name, countries[0].dial_code, countries[0].code, countries[0].latitude, countries[0].longitude);
    }
    verifyPhoneNumber() {
        this.isLoading = true;
        setTimeout(() => {
            this.isLoading = false;
            this.phoneValidated = true;
            this.phoneAvailable = true;
            this.verifiedPhoneNumber = this.phoneNumber.value;
            this.validationPhoneEvent.emit(this.phoneAvailable);
            // EXEMPLO DE ERRO NA VALIDAÇÃO DO TELEFONE
            // this.phoneAvailable = false;
            // this.labelPhoneNumberValidation = 'Phone number unvailable';
            // this.phoneNumber.setErrors({ isInvalidPhoneNumber: true });
        }, 3000);
    }
    get phoneNumber() {
        return this.formGroup.controls.phoneNumber;
    }
}
PhoneNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: PhoneNumberComponent, deps: [{ token: i1.PhoneValidationService }], target: i0.ɵɵFactoryTarget.Component });
PhoneNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.2", type: PhoneNumberComponent, selector: "cdk-phone-number", outputs: { validationPhoneEvent: "validationPhoneEvent" }, ngImport: i0, template: "<form [formGroup]=\"formGroup\" class=\"d-flex flex-column\" (submit)=\"verifyPhoneNumber()\">\r\n  <div class=\"d-flex justify-content-between\">\r\n    <div class=\"row-form mt-0 flex-grow-0\">\r\n      <cdk-custom-select\r\n        placeholder=\"\"\r\n        modelProperty=\"dial_code\"\r\n        label=\"code\"\r\n        [options]=\"options\"\r\n        [selectedOption]=\"selectedOption\"\r\n        [isValid]=\"phoneNumber && phoneNumber.touched && !phoneNumber.errors\"\r\n        (valueChanges)=\"getSelectedCountry($event)\"\r\n        [hasLeftIcon]=\"true\"\r\n        [hasDivider]=\"true\"\r\n        class=\"me-3 d-block\"\r\n      >\r\n        <ng-template #customTemplate let-item let-index let-_index=\"index\">\r\n          <span>\r\n            <i class=\"me-2 flag-icon flag-icon-{{ item?.flag }}\"></i>\r\n            ({{ item?.dial_code }}) {{ item?.name }}\r\n          </span>\r\n\r\n          <span aria-hidden=\"true\" *ngIf=\"_index === 1\" class=\"divider\"></span>\r\n        </ng-template>\r\n\r\n        <ng-template #selectedTemplate let-item>\r\n          <i class=\"me-2 flag-icon flag-icon-{{ item?.flag }}\"></i>\r\n        </ng-template>\r\n      </cdk-custom-select>\r\n    </div>\r\n\r\n    <div class=\"row-form position-relative flex-grow-1 w-100\">\r\n      <input\r\n        type=\"text\"\r\n        id=\"phoneNumber\"\r\n        formControlName=\"phoneNumber\"\r\n        cdkInputValidation\r\n        [class.validated]=\"phoneValidated\"\r\n      />\r\n      <label for=\"phoneNumber\">Phone number</label>\r\n\r\n      <small *ngIf=\"phoneNumber && phoneNumber.touched && phoneNumber.errors\">\r\n        <span *ngIf=\"phoneNumber && phoneNumber.errors['required']\">Phone number is required</span>\r\n        <span *ngIf=\"phoneNumber && phoneNumber.value.length && phoneNumber.errors['isInvalidPhoneNumber']\">{{ labelPhoneNumberValidation }}</span>\r\n      </small>\r\n\r\n      <span class=\"validation-icon\">\r\n        <i class=\"bi bi-check2 check\" *ngIf=\"phoneValidated && phoneAvailable\"></i>\r\n        <i class=\"bi bi-x-lg error\" *ngIf=\"phoneValidated && !phoneAvailable\"></i>\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-end mt-3\">\r\n    <button type=\"submit\" class=\"btn btn-dark\" [disabled]=\"!phoneNumber.value.length || phoneNumber.errors\" [cdkLoadingButton]=\"isLoading\" *ngIf=\"!phoneValidated || !phoneAvailable\">\r\n      <cdk-spinner>Verify Phone</cdk-spinner>\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-outline-success\" disabled *ngIf=\"phoneValidated && phoneAvailable\">Phone Verified</button>\r\n  </div>\r\n\r\n</form>\r\n", styles: ["form{width:100%;max-width:500px}form cdk-custom-select{width:90px}form input.validated{padding-right:30px}form .validation-icon{position:absolute;top:11px;right:3px}form .validation-icon .check{color:#00cb5f}form .validation-icon .error{color:#ff5d4f}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.CustomSelectComponent, selector: "cdk-custom-select", inputs: ["options", "placeholder", "modelProperty", "label", "selectedOption", "isValid", "hasLeftIcon", "hasDivider"], outputs: ["valueChanges"] }, { kind: "directive", type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i5.InputValidationDirective, selector: "[cdkInputValidation]" }, { kind: "directive", type: i6.LoadingButtonDirective, selector: "[cdkLoadingButton]", inputs: ["cdkLoadingButton"] }, { kind: "component", type: i7.SpinnerComponent, selector: "cdk-spinner" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.2", ngImport: i0, type: PhoneNumberComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cdk-phone-number', template: "<form [formGroup]=\"formGroup\" class=\"d-flex flex-column\" (submit)=\"verifyPhoneNumber()\">\r\n  <div class=\"d-flex justify-content-between\">\r\n    <div class=\"row-form mt-0 flex-grow-0\">\r\n      <cdk-custom-select\r\n        placeholder=\"\"\r\n        modelProperty=\"dial_code\"\r\n        label=\"code\"\r\n        [options]=\"options\"\r\n        [selectedOption]=\"selectedOption\"\r\n        [isValid]=\"phoneNumber && phoneNumber.touched && !phoneNumber.errors\"\r\n        (valueChanges)=\"getSelectedCountry($event)\"\r\n        [hasLeftIcon]=\"true\"\r\n        [hasDivider]=\"true\"\r\n        class=\"me-3 d-block\"\r\n      >\r\n        <ng-template #customTemplate let-item let-index let-_index=\"index\">\r\n          <span>\r\n            <i class=\"me-2 flag-icon flag-icon-{{ item?.flag }}\"></i>\r\n            ({{ item?.dial_code }}) {{ item?.name }}\r\n          </span>\r\n\r\n          <span aria-hidden=\"true\" *ngIf=\"_index === 1\" class=\"divider\"></span>\r\n        </ng-template>\r\n\r\n        <ng-template #selectedTemplate let-item>\r\n          <i class=\"me-2 flag-icon flag-icon-{{ item?.flag }}\"></i>\r\n        </ng-template>\r\n      </cdk-custom-select>\r\n    </div>\r\n\r\n    <div class=\"row-form position-relative flex-grow-1 w-100\">\r\n      <input\r\n        type=\"text\"\r\n        id=\"phoneNumber\"\r\n        formControlName=\"phoneNumber\"\r\n        cdkInputValidation\r\n        [class.validated]=\"phoneValidated\"\r\n      />\r\n      <label for=\"phoneNumber\">Phone number</label>\r\n\r\n      <small *ngIf=\"phoneNumber && phoneNumber.touched && phoneNumber.errors\">\r\n        <span *ngIf=\"phoneNumber && phoneNumber.errors['required']\">Phone number is required</span>\r\n        <span *ngIf=\"phoneNumber && phoneNumber.value.length && phoneNumber.errors['isInvalidPhoneNumber']\">{{ labelPhoneNumberValidation }}</span>\r\n      </small>\r\n\r\n      <span class=\"validation-icon\">\r\n        <i class=\"bi bi-check2 check\" *ngIf=\"phoneValidated && phoneAvailable\"></i>\r\n        <i class=\"bi bi-x-lg error\" *ngIf=\"phoneValidated && !phoneAvailable\"></i>\r\n      </span>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"d-flex justify-content-end mt-3\">\r\n    <button type=\"submit\" class=\"btn btn-dark\" [disabled]=\"!phoneNumber.value.length || phoneNumber.errors\" [cdkLoadingButton]=\"isLoading\" *ngIf=\"!phoneValidated || !phoneAvailable\">\r\n      <cdk-spinner>Verify Phone</cdk-spinner>\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-outline-success\" disabled *ngIf=\"phoneValidated && phoneAvailable\">Phone Verified</button>\r\n  </div>\r\n\r\n</form>\r\n", styles: ["form{width:100%;max-width:500px}form cdk-custom-select{width:90px}form input.validated{padding-right:30px}form .validation-icon{position:absolute;top:11px;right:3px}form .validation-icon .check{color:#00cb5f}form .validation-icon .error{color:#ff5d4f}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.PhoneValidationService }]; }, propDecorators: { validationPhoneEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,