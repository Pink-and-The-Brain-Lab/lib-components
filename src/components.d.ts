/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AvatarSize } from "./components/mlz-avatar/models/avatar-size.type";
import { ModelAvatarMask } from "./components/mlz-avatar/models/model-avatar-mask.type";
import { StatusAvatarMask } from "./components/mlz-avatar/models/status-avatar-mask.type";
import { UserStatus } from "./components/mlz-avatar/models/user-status.type";
import { IPasswordEvent } from "./components/mlz-create-password/mlz-create-password";
import { IChooseImage } from "./components/mlz-image-selector/models/choose-image.interface";
export { AvatarSize } from "./components/mlz-avatar/models/avatar-size.type";
export { ModelAvatarMask } from "./components/mlz-avatar/models/model-avatar-mask.type";
export { StatusAvatarMask } from "./components/mlz-avatar/models/status-avatar-mask.type";
export { UserStatus } from "./components/mlz-avatar/models/user-status.type";
export { IPasswordEvent } from "./components/mlz-create-password/mlz-create-password";
export { IChooseImage } from "./components/mlz-image-selector/models/choose-image.interface";
export namespace Components {
    interface MlzAvatar {
        "color": string;
        "imageUrl": string;
        "mask": ModelAvatarMask;
        "maskType": StatusAvatarMask;
        "name": string;
        "size": AvatarSize;
        "status": UserStatus;
    }
    interface MlzCodeValidation {
        "isLoading": boolean;
    }
    interface MlzColorSelector {
    }
    interface MlzCreatePassword {
    }
    interface MlzImageCropper {
        /**
          * A proporção do corte (ex: 16/9, 4/3, 1/1). Use 0 ou null para corte livre.
         */
        "aspectRatio": number;
        /**
          * A imagem em formato Base64 para ser editada.
         */
        "src": string;
    }
    interface MlzImageSelector {
        "aditionalText": string;
        "buttonText": string;
    }
    interface MlzInput {
        "label": string;
        "name": string;
        "status": 'valid' | 'invalid' | 'neutral';
        "type": 'text' | 'password';
        "value": string;
    }
    interface MlzLoadingButton {
        "disabled": boolean;
        "isLoading": boolean;
        "styleClass": string;
        "type": 'submit' | 'button' | 'reset';
    }
    interface MlzRange {
        "max": number;
        "min": number;
        "step": number;
        "value": number;
    }
    interface MlzSpinner {
        "size": string;
    }
}
export interface MlzCodeValidationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzCodeValidationElement;
}
export interface MlzColorSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzColorSelectorElement;
}
export interface MlzCreatePasswordCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzCreatePasswordElement;
}
export interface MlzImageCropperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzImageCropperElement;
}
export interface MlzImageSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzImageSelectorElement;
}
export interface MlzInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzInputElement;
}
export interface MlzLoadingButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzLoadingButtonElement;
}
export interface MlzRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMlzRangeElement;
}
declare global {
    interface HTMLMlzAvatarElement extends Components.MlzAvatar, HTMLStencilElement {
    }
    var HTMLMlzAvatarElement: {
        prototype: HTMLMlzAvatarElement;
        new (): HTMLMlzAvatarElement;
    };
    interface HTMLMlzCodeValidationElementEventMap {
        "validate": string;
    }
    interface HTMLMlzCodeValidationElement extends Components.MlzCodeValidation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzCodeValidationElementEventMap>(type: K, listener: (this: HTMLMlzCodeValidationElement, ev: MlzCodeValidationCustomEvent<HTMLMlzCodeValidationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzCodeValidationElementEventMap>(type: K, listener: (this: HTMLMlzCodeValidationElement, ev: MlzCodeValidationCustomEvent<HTMLMlzCodeValidationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzCodeValidationElement: {
        prototype: HTMLMlzCodeValidationElement;
        new (): HTMLMlzCodeValidationElement;
    };
    interface HTMLMlzColorSelectorElementEventMap {
        "colorChanged": string;
    }
    interface HTMLMlzColorSelectorElement extends Components.MlzColorSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzColorSelectorElementEventMap>(type: K, listener: (this: HTMLMlzColorSelectorElement, ev: MlzColorSelectorCustomEvent<HTMLMlzColorSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzColorSelectorElementEventMap>(type: K, listener: (this: HTMLMlzColorSelectorElement, ev: MlzColorSelectorCustomEvent<HTMLMlzColorSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzColorSelectorElement: {
        prototype: HTMLMlzColorSelectorElement;
        new (): HTMLMlzColorSelectorElement;
    };
    interface HTMLMlzCreatePasswordElementEventMap {
        "passwordValidation": boolean;
        "passwordEvent": IPasswordEvent;
    }
    interface HTMLMlzCreatePasswordElement extends Components.MlzCreatePassword, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzCreatePasswordElementEventMap>(type: K, listener: (this: HTMLMlzCreatePasswordElement, ev: MlzCreatePasswordCustomEvent<HTMLMlzCreatePasswordElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzCreatePasswordElementEventMap>(type: K, listener: (this: HTMLMlzCreatePasswordElement, ev: MlzCreatePasswordCustomEvent<HTMLMlzCreatePasswordElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzCreatePasswordElement: {
        prototype: HTMLMlzCreatePasswordElement;
        new (): HTMLMlzCreatePasswordElement;
    };
    interface HTMLMlzImageCropperElementEventMap {
        "crop": string;
    }
    interface HTMLMlzImageCropperElement extends Components.MlzImageCropper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzImageCropperElementEventMap>(type: K, listener: (this: HTMLMlzImageCropperElement, ev: MlzImageCropperCustomEvent<HTMLMlzImageCropperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzImageCropperElementEventMap>(type: K, listener: (this: HTMLMlzImageCropperElement, ev: MlzImageCropperCustomEvent<HTMLMlzImageCropperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzImageCropperElement: {
        prototype: HTMLMlzImageCropperElement;
        new (): HTMLMlzImageCropperElement;
    };
    interface HTMLMlzImageSelectorElementEventMap {
        "imageFile": IChooseImage;
    }
    interface HTMLMlzImageSelectorElement extends Components.MlzImageSelector, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzImageSelectorElementEventMap>(type: K, listener: (this: HTMLMlzImageSelectorElement, ev: MlzImageSelectorCustomEvent<HTMLMlzImageSelectorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzImageSelectorElementEventMap>(type: K, listener: (this: HTMLMlzImageSelectorElement, ev: MlzImageSelectorCustomEvent<HTMLMlzImageSelectorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzImageSelectorElement: {
        prototype: HTMLMlzImageSelectorElement;
        new (): HTMLMlzImageSelectorElement;
    };
    interface HTMLMlzInputElementEventMap {
        "valueChange": string;
        "inputBlur": void;
    }
    interface HTMLMlzInputElement extends Components.MlzInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzInputElementEventMap>(type: K, listener: (this: HTMLMlzInputElement, ev: MlzInputCustomEvent<HTMLMlzInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzInputElementEventMap>(type: K, listener: (this: HTMLMlzInputElement, ev: MlzInputCustomEvent<HTMLMlzInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzInputElement: {
        prototype: HTMLMlzInputElement;
        new (): HTMLMlzInputElement;
    };
    interface HTMLMlzLoadingButtonElementEventMap {
        "mlzClick": MouseEvent;
    }
    interface HTMLMlzLoadingButtonElement extends Components.MlzLoadingButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzLoadingButtonElementEventMap>(type: K, listener: (this: HTMLMlzLoadingButtonElement, ev: MlzLoadingButtonCustomEvent<HTMLMlzLoadingButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzLoadingButtonElementEventMap>(type: K, listener: (this: HTMLMlzLoadingButtonElement, ev: MlzLoadingButtonCustomEvent<HTMLMlzLoadingButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzLoadingButtonElement: {
        prototype: HTMLMlzLoadingButtonElement;
        new (): HTMLMlzLoadingButtonElement;
    };
    interface HTMLMlzRangeElementEventMap {
        "selectedRange": string;
    }
    interface HTMLMlzRangeElement extends Components.MlzRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMlzRangeElementEventMap>(type: K, listener: (this: HTMLMlzRangeElement, ev: MlzRangeCustomEvent<HTMLMlzRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMlzRangeElementEventMap>(type: K, listener: (this: HTMLMlzRangeElement, ev: MlzRangeCustomEvent<HTMLMlzRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMlzRangeElement: {
        prototype: HTMLMlzRangeElement;
        new (): HTMLMlzRangeElement;
    };
    interface HTMLMlzSpinnerElement extends Components.MlzSpinner, HTMLStencilElement {
    }
    var HTMLMlzSpinnerElement: {
        prototype: HTMLMlzSpinnerElement;
        new (): HTMLMlzSpinnerElement;
    };
    interface HTMLElementTagNameMap {
        "mlz-avatar": HTMLMlzAvatarElement;
        "mlz-code-validation": HTMLMlzCodeValidationElement;
        "mlz-color-selector": HTMLMlzColorSelectorElement;
        "mlz-create-password": HTMLMlzCreatePasswordElement;
        "mlz-image-cropper": HTMLMlzImageCropperElement;
        "mlz-image-selector": HTMLMlzImageSelectorElement;
        "mlz-input": HTMLMlzInputElement;
        "mlz-loading-button": HTMLMlzLoadingButtonElement;
        "mlz-range": HTMLMlzRangeElement;
        "mlz-spinner": HTMLMlzSpinnerElement;
    }
}
declare namespace LocalJSX {
    interface MlzAvatar {
        "color"?: string;
        "imageUrl"?: string;
        "mask"?: ModelAvatarMask;
        "maskType"?: StatusAvatarMask;
        "name"?: string;
        "size"?: AvatarSize;
        "status"?: UserStatus;
    }
    interface MlzCodeValidation {
        "isLoading"?: boolean;
        "onValidate"?: (event: MlzCodeValidationCustomEvent<string>) => void;
    }
    interface MlzColorSelector {
        "onColorChanged"?: (event: MlzColorSelectorCustomEvent<string>) => void;
    }
    interface MlzCreatePassword {
        "onPasswordEvent"?: (event: MlzCreatePasswordCustomEvent<IPasswordEvent>) => void;
        "onPasswordValidation"?: (event: MlzCreatePasswordCustomEvent<boolean>) => void;
    }
    interface MlzImageCropper {
        /**
          * A proporção do corte (ex: 16/9, 4/3, 1/1). Use 0 ou null para corte livre.
         */
        "aspectRatio"?: number;
        /**
          * Evento emitido com a imagem cortada em Base64.
         */
        "onCrop"?: (event: MlzImageCropperCustomEvent<string>) => void;
        /**
          * A imagem em formato Base64 para ser editada.
         */
        "src"?: string;
    }
    interface MlzImageSelector {
        "aditionalText"?: string;
        "buttonText"?: string;
        "onImageFile"?: (event: MlzImageSelectorCustomEvent<IChooseImage>) => void;
    }
    interface MlzInput {
        "label"?: string;
        "name"?: string;
        "onInputBlur"?: (event: MlzInputCustomEvent<void>) => void;
        "onValueChange"?: (event: MlzInputCustomEvent<string>) => void;
        "status"?: 'valid' | 'invalid' | 'neutral';
        "type"?: 'text' | 'password';
        "value"?: string;
    }
    interface MlzLoadingButton {
        "disabled"?: boolean;
        "isLoading"?: boolean;
        "onMlzClick"?: (event: MlzLoadingButtonCustomEvent<MouseEvent>) => void;
        "styleClass"?: string;
        "type"?: 'submit' | 'button' | 'reset';
    }
    interface MlzRange {
        "max"?: number;
        "min"?: number;
        "onSelectedRange"?: (event: MlzRangeCustomEvent<string>) => void;
        "step"?: number;
        "value"?: number;
    }
    interface MlzSpinner {
        "size"?: string;
    }
    interface IntrinsicElements {
        "mlz-avatar": MlzAvatar;
        "mlz-code-validation": MlzCodeValidation;
        "mlz-color-selector": MlzColorSelector;
        "mlz-create-password": MlzCreatePassword;
        "mlz-image-cropper": MlzImageCropper;
        "mlz-image-selector": MlzImageSelector;
        "mlz-input": MlzInput;
        "mlz-loading-button": MlzLoadingButton;
        "mlz-range": MlzRange;
        "mlz-spinner": MlzSpinner;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mlz-avatar": LocalJSX.MlzAvatar & JSXBase.HTMLAttributes<HTMLMlzAvatarElement>;
            "mlz-code-validation": LocalJSX.MlzCodeValidation & JSXBase.HTMLAttributes<HTMLMlzCodeValidationElement>;
            "mlz-color-selector": LocalJSX.MlzColorSelector & JSXBase.HTMLAttributes<HTMLMlzColorSelectorElement>;
            "mlz-create-password": LocalJSX.MlzCreatePassword & JSXBase.HTMLAttributes<HTMLMlzCreatePasswordElement>;
            "mlz-image-cropper": LocalJSX.MlzImageCropper & JSXBase.HTMLAttributes<HTMLMlzImageCropperElement>;
            "mlz-image-selector": LocalJSX.MlzImageSelector & JSXBase.HTMLAttributes<HTMLMlzImageSelectorElement>;
            "mlz-input": LocalJSX.MlzInput & JSXBase.HTMLAttributes<HTMLMlzInputElement>;
            "mlz-loading-button": LocalJSX.MlzLoadingButton & JSXBase.HTMLAttributes<HTMLMlzLoadingButtonElement>;
            "mlz-range": LocalJSX.MlzRange & JSXBase.HTMLAttributes<HTMLMlzRangeElement>;
            "mlz-spinner": LocalJSX.MlzSpinner & JSXBase.HTMLAttributes<HTMLMlzSpinnerElement>;
        }
    }
}
